#!/bin/bash
# TEMPLATE_VERSION=2024-04-25

# Basic bash template for command/resource based CLI.
# Features:
# * Automatic command discovery and help generation
# * Logging and traces
# * Application dependency checker
# * Support for getopts
# * Return code support
# * Command executor with dry mode

set -euo pipefail

# App Global variable
# =================

APP_SCRIPT="${0##*/}"
APP_NAME="${APP_SCRIPT%.*}"
APP_AUTHOR="mrjk"
APP_EMAIL="mrjk<dot>78<at>gmail<dot>com"
APP_LICENSE="GPLv3"
APP_URL="https://github.com/$APP_AUTHOR/$APP_NAME"
APP_REPO="https://github.com/$APP_AUTHOR/$APP_NAME.git"
APP_GIT="git@github.com:$APP_AUTHOR/$APP_NAME.git"

APP_STATUS=stable
APP_DATE="2024-07-25"
APP_VERSION=0.0.1

#APP_DEPENDENCIES="column tree htop"
APP_LOG_SCALE="TRACE:DEBUG:RUN:INFO:DRY:HINT:NOTICE:CMD:USER:WARN:ERR:ERROR:CRIT:TODO:DIE"

APP_DRY=${APP_DRY:-false}
APP_FORCE=${APP_FORCE:-false}
APP_LOG_LEVEL=INFO
#APP_LOG_LEVEL=DRY
#APP_LOG_LEVEL=DEBUG


SCRIPT_REAL_PATH=$(realpath "$0")
SCRIPT_REAL_DIR=$( cd -- "$( dirname -- "$SCRIPT_REAL_PATH" )" &> /dev/null && pwd )
APP_REAL_NAME=$(basename "$SCRIPT_REAL_PATH")

APP_CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/$APP_REAL_NAME
APP_CONFIG_PREFIX='conf.'

# CLI libraries
# =================

_log ()
{
  local lvl="${1:-DEBUG}"
  shift 1 || true

  # Check log level filter
  if [[ ! ":${APP_LOG_SCALE#*$APP_LOG_LEVEL:}:$APP_LOG_LEVEL:" =~ :"$lvl": ]]; then
    if [[ ! ":${APP_LOG_SCALE}" =~ :"$lvl": ]]; then
      >&2 printf "%s\n" "  BUG: Unknown log level: $lvl"
    else
      return 0
    fi
  fi

  local msg=${*}
  if [[ "$msg" == '-' ]]; then
    msg="$(cat - )"
  fi
  while read -r -u 3 line; do
    >&2 printf "%5s: %s\\n" "$lvl" "${line:- }"
  done 3<<<"$msg"
}

_die ()
{
    local rc=${1:-1}
    shift 1 || true
    local msg="${*:-}"
    if [[ -z "$msg" ]]; then
      [ "$rc" -ne 0 ] || exit 0
      _log DIE "Program terminated with error: $rc"
    else
      _log DIE "$msg"
    fi

    # Remove EXIT trap and exit nicely
    trap '' EXIT
    exit "$rc"
}

_exec ()
{
  local cmd=( "$@" )
  if ${APP_DRY:-false}; then
    _log DRY "  | ${cmd[@]}"
  else
    _log RUN "  | ${cmd[@]}"
    "${cmd[@]}"
  fi
}   

_check_bin ()
{
  local cmd cmds="${*:-}"
  for cmd in $cmds; do
    command -v "$1" >&/dev/null || return 1
  done
}

# shellcheck disable=SC2120 # Argument is optional by default
_sh_trace ()
{
  local msg="${*}"

  (
    >&2 printf "%s\n" "TRACE: line, function, file"
    for i in {0..10}; do
      trace=$(caller "$i" 2>&1 || true )
      if [ -z "$trace" ] ; then
        continue
      else
        printf "%s\n" "$trace"
      fi
    done | tac | head -n -1
    [ -z "$msg" ] || >&2 printf "%s\n" "TRACE: Bash trace: $msg"
  )
}

# Usage: trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT
_sh_trap_error () {
    local rc=$1
    [[ "$rc" -ne 0 ]] || return 0
    local line="$2"
    local msg="${3-}"
    local code="${4:-1}"
    set +x

    _log ERR "Uncatched bug:"
    _sh_trace # | _log TRACE -
    if [[ -n "$msg" ]] ; then
      _log ERR "Error on or near line ${line}: ${msg}; got status ${rc}"
    else
      _log ERR "Error on or near line ${line}; got status ${rc}"
    fi
    exit "${code}"
}

# CLI helpers
# =================

# Dispatch command
clish_dispatch ()
{
  local prefix=$1
  local cmd=${2-}
  shift 2 || true
  [ ! -z "$cmd" ] || _die 3 "Missing command name, please check usage"

  if [[ $(type -t "${prefix}${cmd}") == function ]]; then
    "${prefix}${cmd}" "$@"
  else
    _log ERROR "Unknown command for ${prefix%%_?}: $cmd"
    return 3
  fi
}


# Parse command options
# Called function must return an args array with remaining args
clish_parse_opts ()
{
  local func=$1
  shift
  clish_dispatch "$func" _options "$@"
}

# Read CLI options for a given function/command
# Options must be in a case statement and surounded by
# 'parse-opt-start' and 'parse-opt-stop' strings. Returns
# a list of value separated by ,. Fields are:
clish_help_options ()
{
  local func=$1
  local data=

  # Check where to look options function
  if declare -f "${func}_options" >/dev/null; then
    func="${func}_options"
    data=$(declare -f "$func")
    data=$(printf "%s\n%s\n" 'parse-opt-start' "$data" )
  else
    data=$(declare -f "$func")
  fi

  # declare -f ${func} \
  echo "$data" | awk '/parse-opt-start/,/parse-opt-stop/ {print}' \
    | grep --no-group-separator -A 1 -E '^ *--?[a-zA-Z0-9].*)$' \
    | sed -E '/\)$/s@[ \)]@@g;s/.*: "//;s/";//' \
    | xargs -n2 -d'\n' \
    | sed 's/ /,/;/^$/d'
}

# List all available commands starting with prefix
clish_help_subcommands ()
{
  local prefix=${1:-cli__}
  declare -f \
    | grep -E -A 2 '^'"$prefix"'[a-z0-9]*(__[a-z0-9]*)*? \(\)' \
    | sed '/{/d;/--/d;s/'"$prefix"'//;s/ ()/,/;s/";$//;s/^  *: "//;' \
    | xargs -n2 -d'\n' \
    | sed 's/, */,/;s/__/ /g;/,,$/d'
}

# Show help message of a function
clish_help_msg ()
{
  local func=$1
  clish_dispatch "$func" _usage 2>/dev/null || true
}


# Show cli usage for a given command
clish_help ()
{
  : ",Show this help"
  local func=${1:-cli}
  local commands= options= message= output=

  # Help message
  message=$(clish_help_msg $func)

  # Fetch command options
  options=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-16s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_options $func)"
  )

  # Fetch sub command informations
  commands=$(
    while IFS=, read -r flags meta desc _; do
      if [ ! -z "${flags:-}" ]; then
        printf "  %-16s  %-20s  %s\n" "$flags" "$meta" "$desc"
      fi
    done <<< "$(clish_help_subcommands ${func}__)"
  )

  # Display help message
  printf "%s\n" "${message:+$message}
${commands:+
commands:
$commands}
${options:+
options:
$options
}"

  # Append extra infos
  if ! [[ "$func" == *"_"* ]]; then
    cat <<EOF
examples:
  $APP_NAME init .
  $APP_NAME set cars.steering 1

info:
  author: $APP_AUTHOR ${APP_EMAIL:+<$APP_EMAIL>}
  version: ${APP_VERSION:-0.0.1}-${APP_STATUS:-beta}${APP_DATE:+ ($APP_DATE)}
  license: ${APP_LICENSE:-MIT}
EOF
  fi

}


# Internal libreary
# =================

# Libraries
# --------------

path_nicer ()
{
  local path=$1

  if [[ "$path" =~ ^"$HOME" ]]; then
    path="~${path##$HOME}"
  fi

  echo "$path"
}


# Keepass backend
# --------------

#_kp_cli='flatpak run --command=/app/bin/keepassxc-cli org.keepassxc.KeePassXC'


kc_detect_bin ()
{

  if command -v "$KP_BIN" &>/dev/null ; then
    KP_BIN="keepassxc-cli"
  else

    KP_BIN=
    if command -v 'flatpak' &>/dev/null; then
      if flatpak info org.keepassxc.KeePassXC >&/dev/null; then
        KP_BIN='flatpak run --command=/app/bin/keepassxc-cli org.keepassxc.KeePassXC'
        _log DEBUG "Found keepassxc-cli in flatpak installation (org.keepassxc.KeePassXC)"
      else
        _log DEBUG "Could not find keepassxc-cli in flatpak installation"
      fi
    fi

  fi

  [[ -n "$KP_BIN" ]] || \
    _die 7 "Could not find 'keepassxc-cli' command. Plese install keepass first."
}

kc_get ()
{
  local args=$@
  local result=$(expect -c 'spawn '"$KP_BIN"' show -s "'"$KC_DB"'" "'"$args"'" ; expect "Enter password to unlock"; send "'"$KC_PASS"'\r"; interact;')


 # echo "$result"

  if grep -q 'Could not find entry' <<< "$result"; then
    >&2 echo "ERROR: Could not find password matching key: $args"
    return 1
  fi

  sed -n '/^Password: /s/Password: //p' <<< "$result"

}

ensure_keepass_settings ()
{
  if [[ -z "${KC_DB:-}" ]]; then
    _die 4 "Missing keepass db file configuration"
  elif [[ ! -f "${KC_DB:-}" ]]; then
    _die 5 "Keepass db file does not exists: $KC_DB"
  fi
  if [[ -z "${KC_PASS:-}" ]]; then
    echo -n "Keepass Password: "
    read -s KC_PASS
  fi

}



# App context
# --------------

profile_get ()
{
  local target="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}${1}.env"
  echo "$target"
}

profile_exists ()
{
  local profile_path=$(profile_get "$1" )
  [[ -f "$profile_path" ]]
}

load_profile ()
{
  local profile=${1:-$KC_PROFILE}
  local prefix=conf.

  KC_CONF="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}env"
  if [[ -n "$profile" ]]; then

    KC_CONF="$APP_CONFIG_DIR/${APP_CONFIG_PREFIX}${profile}.env"
    [[ -f "$KC_CONF" ]] || \
      return 1
  fi
  
  if [[ -f "$KC_CONF" ]]; then
    _log INFO "Loading profile conf: $KC_CONF"
    . "$KC_CONF"
  else
    _log DEBUG "Skip absent profile file: $KC_CONF"
  fi
}



# Query parser
# --------------

parse_query ()
{
  local key="$@"

  local profile=${key%%__*}
  if [[ -n "$profile" ]] && [[ "$profile" != "$key" ]]; then
    KC_KEY=${key#${profile}__}
    KC_PROFILE=$profile
    _log INFO "Extracted profile from key: $KC_PROFILE ($KC_KEY)"
  else
    KC_KEY=$key
  fi
}

parse_get ()
{
  KC_KEY=$@
  if [[ $# -gt 1 ]]; then
    if profile_exists $1; then
      KC_PROFILE=$1
      _log DEBUG "Matched profile: $KC_PROFILE"
      shift 1
      KC_KEY=$@
      _log DEBUG "Reparsed key: $KC_KEY"
    fi
  fi
}

# Core App
# =================

cli__get()
{
  : "[PROFILE] KEY,Get key values"

  # Parse arguments
  parse_get "$@"
  
  # Retrieve value
  load_profile || \
    _die 3 "Missing profile file: $KC_CONF"
  ensure_keepass_settings

  kc_get "$KC_KEY"
}

cli__query()
{
  : "QUERY,Get query values"

  # Parse query
  parse_query "${@:-$KC_QUERY}"
  #kc_debug

  # Show query
  load_profile || \
    _die 3 "Missing profile file: $KC_CONF"
  ensure_keepass_settings

  kc_get "$KC_KEY"
}



cli__shell()
{
  : "[PROFILE],Generate shell code to be sourced in shell"

  local script_path=$( path_nicer "$SCRIPT_PATH" )
  local query=${@:-default__ansible_vault}

cat <<EOF
# Configuration for ansible vault
# =====================
#
# Debug mode: $script_path --vault-id ${query}

export ANSIBLE_VAULT_IDENTITY="${query}@$script_path"
export DEFAULT_VAULT_ENCRYPT_IDENTITY="${query}@$script_path"
[[ -z "${ANSIBLE_VAULT_IDENTITY_LIST:-}" ]] || CURRENT_VAULT_ID_LIST=",\${ANSIBLE_VAULT_IDENTITY_LIST}"
export ANSIBLE_VAULT_IDENTITY_LIST="${query}@${script_path}\${CURRENT_VAULT_ID_LIST:-}"

EOF

  local short_name=${script_path%.*}
  if [[ "$short_name" =~ .*"-client" ]]; then
    _dir 6 "Script '$script_path' must ends with '-client' to be able to run with ansible."
  fi

#  kc_debug
}

cli__info()
{
  : "KEY,Get key values"

  parse_get "$@"
  load_profile

  kc_debug
}

kc_debug ()
{
  cat <<EOF
KP_BIN=$KP_BIN

KEEPASS_CLIENT_KEY=$KC_KEY
KEEPASS_CLIENT_PROFILE=$KC_PROFILE
KEEPASS_CLIENT_DB=$KC_DB
KEEPASS_CLIENT_CONF=$KC_CONF
KEEPASS_CLIENT_PASS=$KC_PASS

APP_REAL_NAME=$APP_REAL_NAME
SCRIPT_PATH=$SCRIPT_PATH
SCRIPT_DIR=$SCRIPT_DIR
SCRIPT_REAL_PATH=$SCRIPT_REAL_PATH
SCRIPT_REAL_DIR=$SCRIPT_REAL_DIR
EOF
}

#####################################



# Core App
# =================

# App initialization
cli_init ()
{
  # Useful shortcuts
  export GIT_DIR=$(git rev-parse --show-toplevel 2>/dev/null)
  export SCRIPT_PATH="${BASH_SOURCE[0]}"
  export SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
  #export SCRIPT_DIR=$( cd -- "$( dirname -- "$SCRIPT_PATH" )" &> /dev/null && pwd )


  export WORK_DIR=${GIT_DIR:-${SCRIPT_DIR:-$PWD}}
  export PWD_DIR=${PWD}

  # Default settings
  export APP_DB_DIR=.

  export KC_PROFILE=${KEEPASS_CLIENT_PROFILE:-}
  export KC_KEY=${KEEPASS_CLIENT_KEY:-}
  export KC_DB=${KEEPASS_CLIENT_DB:-}
  export KC_PASS=${KEEPASS_CLIENT_PASS:-}
  export KC_CONF=${KEEPASS_CLIENT_CONF:-}

  export KC_IN_VAULT=false
  export KP_BIN='keepassxc-cli'

  kc_detect_bin
}

# App help message
cli_usage ()
{
  cat <<EOF
${APP_NAME} is command line tool

usage: ${APP_NAME} [OPTS] COMMAND [ARGS]
       ${APP_NAME} help
EOF
}

# Parse CLI options
cli_options ()
{
  while [[ ! -z "${1:-}" ]]; do
    # : "parse-opt-start"
    case "$1" in

      # ansible-vault compatibility
      -q|-i|--vault-id|--query)
        : "ID,Set vault ID"
        # This option is greedy, because ansible-vault does not properly send arguments
        KC_IN_VAULT=true
        _log INFO "Loaded from ansible-vault"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault ID"
        shift 1
        _log INFO "Use query: $@"
        KC_QUERY=$@ 
        shift $#
        ;;

      # Key query
      -o|--profile)
        : "PROFILE,Set query profile"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault profile"
        _log INFO "Use profile: $2"
        KC_PROFILE=$2 
        shift 2
        ;;

      -k|--key)
        : "ID,Set key to retrieve"
        # This option is greedy, because ansible-vault does not properly send arguments
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault ID"
        _log INFO "Use ID: $2"
        KC_KEY=$2 
        shift 2
        ;;

      # Keepass backend
      -d|--db)
        : "FILE,Path to kbdx file"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault file"
        _log INFO "Use keepass file: $2"
        KC_DB=$2 
        shift 2
        ;;

      -p|--pass)
        : "PASSWORD,Keepass db password"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing vault password"
        _log DEBUG "Use keepass password: $2"
        KC_PASS=$2 
        shift 2
        ;;


      -h|--help)
        : ",Show this help message"
        clish_help cli; 
        _die 0
        ;;
      -n|--dry)
        : ",Enable dry mode"
        _log INFO "Dry mode enabled"
        APP_DRY=true 
        shift
        ;;
      #-f|--force)
      #  : ",Enable force mode"
      #  _log INFO "Force mode enabled"
      #  APP_FORCE=true 
      #  shift
      #  ;;
      -v|--verbose)
        : "[LEVEL],Set verbosity level"
        [[ ! -z "${2:-}" ]] || _die 1 "Missing log level value"
        _log INFO "Log level set to: $2"
        APP_LOG_LEVEL=$2 
        shift 2
        ;;
      -*)
        _die 1 "Unknown option: $1"
        ;;
      *)
        args=( "$@" )
        shift $#
        
        # To enable greedy parsing
        # args+=( "$1" )
        # shift 1
      ;;
    esac
    # : "parse-opt-stop"
  done
}

cli ()
{
  # Init
  trap '_sh_trap_error $? ${LINENO} trap_exit 42' EXIT

  # Init app
  cli_init

  # Parse CLI flags
  clish_parse_opts cli "$@"
  set -- "${args[@]}"

  # Route commands before requirements
  local cmd="query"
  if ! $KC_IN_VAULT; then
    cmd=${1:-help}
    shift 1 || true
  fi
  case "$cmd" in
    -h|--help|help) clish_help cli; return ;;
    # expl) cli__example "$@"; return ;;
  esac
  
  # Define requirements
  local prog
  for prog in ${APP_DEPENDENCIES-} ; do
    _check_bin $prog || {
      _log ERROR "Command '$prog' must be installed first"
      return 2
    }
  done

  # Dispatch subcommand
  clish_dispatch cli__ "$cmd" "$@" \
    || _die $? "Command '$cmd' returned error: $?"  
}

cli "${@}"
